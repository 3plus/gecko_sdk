/**
 * @file
 * Command Class Notification Configuration
 * @remarks This file is auto generated
 * @copyright 2022 Silicon Laboratories Inc.
 */

#include <stdint.h>
#include <stdbool.h>
#include <notification.h>
#include <CC_Notification.h>
#include <cc_notification_config.h>
#include <cc_notification_config_api.h>
#include <SizeOf.h>
#include <Assert.h>

static cc_notification_t notifications[] = {
{% for notification in notifications %}
  {
    .type = {{notification['type']}},
    {% if 'endpoint' in notification %}
    .endpoint = {{notification['endpoint']}},
    {% else %}
    .endpoint = 0,
    {% endif %}
    {# agi_profile #}
    {% for agi in notification['agi_profile'] %}
      {% if 'profile_MS' in agi %}
    .agi_profile.profile_MS = {{agi['profile_MS']}},
      {% else %}
    .agi_profile.profile_LS = {{agi['profile_LS']}},
      {% endif %}
    {% endfor %}
    {# states/events #}
    {% for st in notification['state_events'] %}
    .events[{{ loop.index -1}}] = {{st['state_event']}},
    {% endfor %}
    .current_event = NOTIFICATION_EVENT_NO_EVENT,
    .status        = NOTIFICATION_STATUS_UNSOLICIT_ACTIVATED,
  },
{% endfor %}
};

STATIC_ASSERT((sizeof_array(notifications) > 0), STATIC_ASSERT_FAILED_size_mismatch);

cc_notification_t * cc_notification_get_config(void) {
  return notifications;
}

uint8_t cc_notification_get_config_length(void) {
  return sizeof_array(notifications);
}

uint8_t cc_notification_get_supported_events_length(void) {
  // find the max length of events list in notifications array
  uint8_t len = 0;
  for (uint8_t i = 0; i {{'<'}} sizeof_array(notifications); i++) {
    uint8_t temp_len = sizeof_array(notifications[i].events);
    if (temp_len {{'>'}} len) {
      len = temp_len;
    }
  }
  return len;
}

cc_notification_t* cc_notification_get(uint8_t index) {
  if(index >= sizeof_array(notifications)) {
    return NULL;
  }
  return &notifications[index];
}

int8_t cc_notification_get_index_by_type_and_endpoint(notification_type_t type, uint8_t endpoint) {
  for (uint8_t i = 0; i {{'<'}} sizeof_array(notifications); i++) {
    if (type == notifications[i].type && endpoint == notifications[i].endpoint) {
      return (int8_t)i;
    }
  }
  return -1;
}

notification_type_t cc_notification_get_type(uint8_t index) {
  return notifications[index].type;
}

notification_event_state cc_notification_get_current_event(uint8_t index) {
  return notifications[index].current_event;
}

agi_profile_t cc_notification_get_agi_profile(uint8_t index) {
  return notifications[index].agi_profile;
}

uint8_t cc_notification_get_endpoint(uint8_t index) {
  return notifications[index].endpoint;
}

NOTIFICATION_STATUS cc_notification_get_status(uint8_t index) {
  return notifications[index].status;
}

bool cc_notification_is_type_supported(notification_type_t type) {
  for (uint8_t i = 0; i {{'<'}} sizeof_array(notifications); i++) {
    if (type == notifications[i].type) {
      return true;
    }
  }
  return false;
}

int8_t cc_notification_find_event(uint8_t event, uint8_t index)
{
  for (uint8_t i = 0; i {{'<'}} sizeof_array(notifications[index].events); i++) {
    if (event == notifications[index].events[i]) {
      return (int8_t)i;
    }
  }
  return -1;
}

{% for _ in notifications %}
ZAF_CC_REGISTER_CONFIG(COMMAND_CLASS_NOTIFICATION_V8, &notifications[{{loop.index - 1}}], {{loop.index - 1}});
{% endfor %}

