// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

// The following is brought in by the endianness component, which all
// applications must include
#include "sl_endianness.h"

#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG 1

// Default values for the attributes longer than a pointer, in a form of a
// binary blob. All attribute values with size greater than 2 bytes. Excluding 0
// values and externally saved values. Separate block is generated for
// big-endian and little-endian cases.

#define GENERATED_DEFAULTS_COUNT (5)

#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS {                                                                                                                                                              \
    0xFF, 0xFF, 0xFF, /* 0,DEFAULT value for cluster: Green Power, attribute: gps active functionality, side: server */                                                                   \
    0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 3,DEFAULT value for cluster: Green Power, attribute: gp link key, side: server */  \
    0x09, 0xAC, 0x2F, /* 19,DEFAULT value for cluster: Green Power, attribute: gpp functionality, side: client */                                                                         \
    0xFF, 0xFF, 0xFF, /* 22,DEFAULT value for cluster: Green Power, attribute: gpp active functionality, side: client */                                                                  \
    0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 25,DEFAULT value for cluster: Green Power, attribute: gp link key, side: client */ \
}
#else //!BIGENDIAN_CPU
#define GENERATED_DEFAULTS {                                                                                                                                                              \
    0xFF, 0xFF, 0xFF, /* 0,DEFAULT value for cluster: Green Power, attribute: gps active functionality, side: server */                                                                   \
    0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 3,DEFAULT value for cluster: Green Power, attribute: gp link key, side: server */  \
    0x2F, 0xAC, 0x09, /* 19,DEFAULT value for cluster: Green Power, attribute: gpp functionality, side: client */                                                                         \
    0xFF, 0xFF, 0xFF, /* 22,DEFAULT value for cluster: Green Power, attribute: gpp active functionality, side: client */                                                                  \
    0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 25,DEFAULT value for cluster: Green Power, attribute: gp link key, side: client */ \
}
#endif

// This is an array of EmberAfAttributeMinMaxValue structures.

#define GENERATED_MIN_MAX_DEFAULT_COUNT (0)
  #define GENERATED_MIN_MAX_DEFAULTS {}

#define GENERATED_ATTRIBUTE_COUNT (25)

// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTES {                                                                                                                                                                                     \
    { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x14  } },/* 0 Cluster: Green Power, Attribute: gpp max proxy table entries, Side: client*/                                        \
    { 0x0011, ZCL_LONG_OCTET_STRING_ATTRIBUTE_TYPE, 255, (ATTRIBUTE_MASK_CLIENT), { NULL } },   /* 1 Cluster: Green Power, Attribute: proxy table, Side: client*/                                                  \
    { 0x0012, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x02  } }, /* 2 Cluster: Green Power, Attribute: gpp notification retry number, Side: client*/           \
    { 0x0013, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x64  } },  /* 3 Cluster: Green Power, Attribute: gpp notification retry timer, Side: client*/           \
    { 0x0014, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0A  } },  /* 4 Cluster: Green Power, Attribute: gpp max search counter, Side: client*/                 \
    { 0x0015, ZCL_LONG_OCTET_STRING_ATTRIBUTE_TYPE, 255, (ATTRIBUTE_MASK_CLIENT), { NULL } },   /* 5 Cluster: Green Power, Attribute: gpp blocked gpd id, Side: client*/                                           \
    { 0x0016, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[19]) } }, /* 6 Cluster: Green Power, Attribute: gpp functionality, Side: client*/                           \
    { 0x0017, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[22]) } }, /* 7 Cluster: Green Power, Attribute: gpp active functionality, Side: client*/                    \
    { 0x0020, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x03  } }, /* 8 Cluster: Green Power, Attribute: gp shared security key type, Side: client*/           \
    { 0x0021, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { NULL } },  /* 9 Cluster: Green Power, Attribute: gp shared security key, Side: client*/                    \
    { 0x0022, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[25]) } }, /* 10 Cluster: Green Power, Attribute: gp link key, Side: client*/ \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 11 Cluster: Green Power, Attribute: cluster revision, Side: client*/                                              \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x05  } },   /* 12 Cluster: Green Power, Attribute: gps max sink table entries, Side: server*/                                                      \
    { 0x0001, ZCL_LONG_OCTET_STRING_ATTRIBUTE_TYPE, 255, (0x00), { NULL } },   /* 13 Cluster: Green Power, Attribute: sink table, Side: server*/                                                                   \
    { 0x0002, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x01  } }, /* 14 Cluster: Green Power, Attribute: gps communication mode, Side: server*/                                       \
    { 0x0003, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x02  } },   /* 15 Cluster: Green Power, Attribute: gps commissioning exit mode, Side: server*/                                \
    { 0x0004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00B4  } },   /* 16 Cluster: Green Power, Attribute: gps commissioning window, Side: server*/                                  \
    { 0x0005, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x01  } },   /* 17 Cluster: Green Power, Attribute: gps security level, Side: server*/                                         \
    { 0x0006, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },   /* 18 Cluster: Green Power, Attribute: gps functionality, Side: server*/                                                                       \
    { 0x0007, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (0x00), { (uint8_t*)&(generatedDefaults[0]) } }, /* 19 Cluster: Green Power, Attribute: gps active functionality, Side: server*/                                     \
    { 0x0020, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x03  } }, /* 20 Cluster: Green Power, Attribute: gp shared security key type, Side: server*/                                  \
    { 0x0021, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL } },   /* 21 Cluster: Green Power, Attribute: gp shared security key, Side: server*/                                          \
    { 0x0022, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)&(generatedDefaults[3]) } }, /* 22 Cluster: Green Power, Attribute: gp link key, Side: server*/                          \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 23 Cluster: Green Power, Attribute: cluster revision, Side: server*/                                                               \
    { 0xFFFE, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }   /* 24 Cluster: Green Power, Attribute: reporting status, Side: server*/                                                                 \
}

#define GENERATED_CLUSTER_COUNT (2)

// This is an array of EmberAfCluster structures.
#define GENERATED_CLUSTERS {                                                                                                                                           \
    { 0x0021, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 12, 555, CLUSTER_MASK_CLIENT, NULL }, /* 0, Endpoint Id: 242, Cluster: Green Power, Side: client*/ \
    { 0x0021, (EmberAfAttributeMetadata*)&(generatedAttributes[12]), 13, 303, CLUSTER_MASK_SERVER, NULL } /* 1, Endpoint Id: 242, Cluster: Green Power, Side: server*/ \
}

#define GENERATED_ENDPOINT_TYPE_COUNT (1)

// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES {                          \
    { ((EmberAfCluster*)&(generatedClusters[0])), 2, 858 }, \
}
// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (255)

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (0)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (858)

// Number of fixed endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Array of endpoints that are supported, the data inside the array is the
// endpoint number.
#define FIXED_ENDPOINT_ARRAY { \
    242                        \
}

// Array of profile ids
#define FIXED_PROFILE_IDS { \
    41440                   \
}

// Array of device ids
#define FIXED_DEVICE_IDS { \
    102                    \
}

// Array of device versions
#define FIXED_DEVICE_VERSIONS { \
    1                           \
}

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { \
    0                          \
}

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { \
    0                    \
}

// Array of EmberAfCommandMetadata structs.
#define ZAP_COMMAND_MASK(mask) COMMAND_MASK_ ## mask
#define EMBER_AF_GENERATED_COMMAND_COUNT  (17)
#define GENERATED_COMMANDS {                                                                                                                          \
    { 0x0021, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 0, Cluster: Green Power, Command: GpNotification*/              \
    { 0x0021, 0x00, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 1, Cluster: Green Power, Command: GpNotificationResponse*/      \
    { 0x0021, 0x01, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 2, Cluster: Green Power, Command: GpPairing*/                   \
    { 0x0021, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 3, Cluster: Green Power, Command: GpPairingSearch*/             \
    { 0x0021, 0x02, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 4, Cluster: Green Power, Command: GpProxyCommissioningMode*/    \
    { 0x0021, 0x03, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 5, Cluster: Green Power, Command: GpTunnelingStop*/             \
    { 0x0021, 0x04, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 6, Cluster: Green Power, Command: GpCommissioningNotification*/ \
    { 0x0021, 0x05, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 7, Cluster: Green Power, Command: GpSinkCommissioningMode*/     \
    { 0x0021, 0x06, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 8, Cluster: Green Power, Command: GpResponse*/                  \
    { 0x0021, 0x07, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 9, Cluster: Green Power, Command: GpTranslationTableUpdate*/    \
    { 0x0021, 0x08, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 10, Cluster: Green Power, Command: GpTranslationTableRequest*/  \
    { 0x0021, 0x08, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 11, Cluster: Green Power, Command: GpTranslationTableResponse*/ \
    { 0x0021, 0x09, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 12, Cluster: Green Power, Command: GpPairingConfiguration*/     \
    { 0x0021, 0x0A, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 13, Cluster: Green Power, Command: GpSinkTableRequest*/         \
    { 0x0021, 0x0A, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 14, Cluster: Green Power, Command: GpSinkTableResponse*/        \
    { 0x0021, 0x0B, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 15, Cluster: Green Power, Command: GpProxyTableRequest*/        \
    { 0x0021, 0x0B, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 16, Cluster: Green Power, Command: GpProxyTableResponse*/       \
}
// Array of EmberAfManufacturerCodeEntry structures for commands.
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_COMMAND_MANUFACTURER_CODES { \
    { 0x00, 0x00 }                             \
}
// This is an array of EmberAfManufacturerCodeEntry structures for clusters.
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_CLUSTER_MANUFACTURER_CODES { \
    { 0x00, 0x00 }                             \
}
// This is an array of EmberAfManufacturerCodeEntry structures for attributes.
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES { \
    { 0x00, 0x00 }                               \
}
// Array of EmberAfPluginReportingEntry structures.
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (25)
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS {                                                                                                                                                   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps max sink table entries */    \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0001, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: sink table */                    \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0002, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps communication mode */        \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps commissioning exit mode */   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps commissioning window */      \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0005, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps security level */            \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0006, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps functionality */             \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0007, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gps active functionality */      \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0010, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp max proxy table entries */   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0011, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: proxy table */                   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0012, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp notification retry number */ \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0013, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp notification retry timer */  \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0014, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp max search counter */        \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0015, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp blocked gpd id */            \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0016, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp functionality */             \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0017, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gpp active functionality */      \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0020, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gp shared security key type */   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0020, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gp shared security key type */   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0021, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gp shared security key */        \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0021, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gp shared security key */        \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0022, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gp link key */                   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0x0022, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: gp link key */                   \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0xFFFD, CLUSTER_MASK_CLIENT, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: cluster revision */              \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0xFFFD, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: cluster revision */              \
    { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x00F2, 0x0021, 0xFFFE, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 242, Cluster: Green Power, Attribute: reporting status */              \
}

#define EMBER_AF_MANUFACTURER_CODE 0x1049
#define EMBER_AF_DEFAULT_RESPONSE_POLICY_ALWAYS

// All Enabled Clusters
#define ZCL_USING_GREEN_POWER_CLUSTER_CLIENT
#define ZCL_USING_GREEN_POWER_CLUSTER_SERVER

// Cluster Counts
#define EMBER_AF_GREEN_POWER_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_GREEN_POWER_CLUSTER_SERVER_ENDPOINT_COUNT (1)

// All Enabled Cluster Attributes
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_MAX_PROXY_TABLE_ENTRIES_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_PROXY_TABLE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_NOTIFICATION_RETRY_NUMBER_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_NOTIFICATION_RETRY_TIMER_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_MAX_SEARCH_COUNTER_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_BLOCKED_GPD_ID_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_ACTIVE_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_SHARED_SECURITY_KEY_TYPE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_SHARED_SECURITY_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_LINK_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_MAX_SINK_TABLE_ENTRIES_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_SINK_TABLE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_COMMUNICATION_MODE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_COMMISSIONING_EXIT_MODE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_COMMISSIONING_WINDOW_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_SECURITY_LEVEL_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GPS_ACTIVE_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GP_SHARED_SECURITY_KEY_TYPE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GP_SHARED_SECURITY_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_SERVER_GP_LINK_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_REPORTING_STATUS_SERVER_ATTRIBUTE

#define EMBER_AF_SUPPORT_COMMAND_DISCOVERY

#endif // SILABS_AF_ENDPOINT_CONFIG
